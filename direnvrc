# -*- mode: sh; sh-shell: bash -*-

# From https://github.com/nix-community/nix-direnv#storing-direnv-outside-the-project-directory
direnv_layout_dir() {
    echo -n "${XDG_CACHE_HOME:-$HOME/.cache}"/direnv/layouts/
    echo -n "$PWD" | shasum | cut -d ' ' -f 1
}

layout_python() {
  local old_env
  local python=${1:-python}
  [[ $# -gt 0 ]] && shift

  local opt
  local tag=""
  while getopts ':t:' opt; do
      case $opt in
          t)
              tag="-$OPTARG"
              ;;
          \?)
              echo "Invalid option: -$OPTARG" >&2
              return 1
              ;;
          :)
              echo "Option -$OPTARG requires an argument" >&2
              return 1
              ;;
      esac
  done
  shift $OPTIND

  old_env=$(direnv_layout_dir)/virtualenv
  unset PYTHONHOME
  if [[ -d $old_env && $python == python ]]; then
    VIRTUAL_ENV=$old_env
  else
    local python_version ve
    # shellcheck disable=SC2046
    read -r python_version ve <<<$($python -c "import pkgutil as u, platform as p;ve='venv' if u.find_loader('venv') else ('virtualenv' if u.find_loader('virtualenv') else '');print(p.python_version()+' '+ve)")
    if [[ -z "$python_version" ]]; then
      log_error "Could not find python's version"
      return 1
    fi

    VIRTUAL_ENV="$(direnv_layout_dir)/python$tag-$python_version"
    if [[ ! -d $VIRTUAL_ENV ]]; then
      case $ve in
        "venv")
          $python -m venv "$VIRTUAL_ENV"
          ;;
        "virtualenv")
          $python -m virtualenv "$VIRTUAL_ENV"
          ;;
        *)
          log_error "Error: neither venv nor virtualenv are available."
          return 1
          ;;
      esac
      "$VIRTUAL_ENV/bin/pip" install --upgrade pip
      "$VIRTUAL_ENV/bin/pip" install wheel
      if [[ $# -gt 0 ]]; then
        "$VIRTUAL_ENV/bin/pip" install "$@"
      fi
    fi
  fi
  export VIRTUAL_ENV
  PATH_add "$VIRTUAL_ENV/bin"
}

layout_python-venv() {
    local python=${1:-python3}
    [[ $# -gt 0 ]] && shift
    layout_python "$python" "$@"
}

layout_anaconda() {
  local env_name
  local create_args
  if [ -n "$1" ]; then
    # Explicit environment name from layout command.
    env_name="$1"
    create_args="--name=$1"
  elif (grep -q name: environment.yml); then
    # Detect environment name from `environment.yml` file in `.envrc` directory
    env_name="$(grep name: environment.yml | sed -e 's/name: //' | cut -d "'" -f 2 | cut -d '"' -f 2)"
    create_args="--file=environment.yml"
  else
    (>&2 echo No environment specified);
    exit 1;
  fi;
  source "$(dirname "$CONDA_EXE")/../etc/profile.d/conda.sh"
  if ! (conda env list | grep -q "^$env_name\s"); then
    conda create --yes "$create_args"
  fi
  conda activate "$env_name"
}

layout_poetry() {
    poetry install --remove-untracked "$@"
    watch_file pyproject.toml poetry.lock
    VIRTUAL_ENV="$(poetry env info --path)"
    export VIRTUAL_ENV
    PATH_add "$VIRTUAL_ENV/bin"
}
